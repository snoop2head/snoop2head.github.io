{"version":3,"sources":["webpack:///./src/components/Tag.js","webpack:///./src/pages/about.js","webpack:///./src/components/Markdown.js","webpack:///./src/components/Divider.js","webpack:///./src/components/Tags.js"],"names":["Tag","onClick","tag","selectedTag","scrollToCenter","isDarkMode","useContext","ThemeContext","tabRef","useRef","handleClick","useCallback","useEffect","ref","css","darkModeColor","textColor1","whiteModeColor","Wrapper","resumes","data","allMarkdownRemark","edges","useState","undefined","resume","filter","node","frontmatter","title","map","className","color","html","Markdown","MarkdownCSS","mainColor2","mainColor1","mainColor3","dangerouslySetInnerHTML","__html","Divider","vertical","margin","fat","Tags","tags","index","key"],"mappings":"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","file":"component---src-pages-about-js-3c0cba9242c81692c359.js","sourcesContent":["import React, { useContext, useRef, useEffect, useCallback } from \"react\"\nimport tw, { css } from \"twin.macro\"\nimport ThemeContext from \"../lib/context/ThemContext\"\nimport { darkModeColor, whiteModeColor } from \"../../them-color\"\n\nconst Tag = ({ onClick, tag, selectedTag, scrollToCenter }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  const tabRef = useRef(null)\n\n  const handleClick = useCallback(() => {\n    if (scrollToCenter) scrollToCenter(tabRef)\n    if (onClick) onClick(tag)\n  }, [scrollToCenter, onClick, tabRef, tag])\n\n  useEffect(() => {\n    if (selectedTag === tag && scrollToCenter) {\n      scrollToCenter(tabRef)\n    }\n  }, [scrollToCenter, selectedTag, tabRef, tag])\n\n  return (\n    <button\n      ref={tabRef}\n      css={css`\n        white-space: nowrap;\n        transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        ${tw`text-base font-bold rounded-full mr-2 my-1 py-1 px-3`}\n        ${selectedTag === tag ? \"color\" : \"background-color\"}:\n        ${isDarkMode ? `#2d3748` : `#edf2f7`};\n        ${selectedTag === tag ? `background-color` : `color`}: ${isDarkMode\n          ? darkModeColor.textColor1\n          : whiteModeColor.textColor1};\n      `}\n      onClick={handleClick}\n    >\n      {tag}\n    </button>\n  )\n}\n\nexport default Tag\n","import React, { useState } from \"react\"\nimport { graphql } from \"gatsby\"\nimport Markdown from \"../components/Markdown\"\nimport Layout from \"../components/Layout\"\nimport Divider from \"../components/Divider\"\nimport Tags from \"../components/Tags\"\nimport tw from \"twin.macro\"\nconst Wrapper = tw.div`w-full max-w-screen-md mx-auto`\n\nexport default ({ data }) => {\n  const resumes = data.allMarkdownRemark.edges\n  const [currentHeaderUrl, setCurrentHeaderUrl] = useState(undefined)\n\n  const resume = resumes\n    .filter((resume) => resume.node.frontmatter.title === \"Resume\")\n    .map(({ node }) => node)[0]\n\n  return (\n    <>\n      <Layout>\n        <div css={tw`mt-4 px-4`} className=\"blog-post-container\">\n          <div className=\"blog-post\">\n            <Wrapper>\n              <h1\n                className=\"blog-title\"\n                css={tw`text-4xl md:text-5xl font-bold mb-4`}\n              >\n                {\"Portfolio\"}\n              </h1>\n              <h2 className=\"blog-date\" css={tw`text-base mb-4`}>\n                {\"September 25th 2022\"}\n              </h2>\n\n              <Divider color />\n            </Wrapper>\n          </div>\n        </div>\n        <div css={tw`mt-4 px-4`} className={\"blog-content\"}>\n          <Wrapper>\n            <Markdown html={resume.html} />\n          </Wrapper>\n        </div>\n      </Layout>\n    </>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { eq: true } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          html\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            draft\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from \"react\"\nimport { css } from \"twin.macro\"\nimport ThemeContext from \"../lib/context/ThemContext\"\nimport { whiteModeColor, darkModeColor } from \"../../them-color\"\n\nconst Markdown = ({ html }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  const MarkdownCSS = css`\n    font-size: 1rem;\n    word-break: break-word;\n\n    h1 > a > svg,\n    h2 > a > svg,\n    h3 > a > svg,\n    h4 > a > svg,\n    h5 > a > svg,\n    h6 > a > svg {\n      fill: ${isDarkMode ? \"#fff\" : \"#000\"};\n    }\n\n    h1,\n    h2 {\n      font-size: 1.25rem;\n      font-weight: 600;\n      margin-top: 1.5rem;\n      margin-bottom: 1.5rem;\n    }\n    h3,\n    h4,\n    h5,\n    h6 {\n      font-size: 1.125rem;\n      margin-top: 1.5rem;\n      margin-bottom: 1.5rem;\n      font-weight: 600;\n    }\n\n    @media (min-width: 640px) {\n      h1,\n      h2 {\n        font-size: 1.5rem;\n      }\n      h3,\n      h4,\n      h5,\n      h6 {\n        font-size: 1.25rem;\n      }\n    }\n\n    a {\n      color: ${isDarkMode\n        ? darkModeColor.textColor1\n        : whiteModeColor.textColor1};\n    }\n    a:hover {\n      text-decoration: underline;\n    }\n    p {\n      margin: 0.3rem;\n      margin-top: 0.75rem;\n      margin-bottom: 0.75rem;\n    }\n    ul,\n    ol {\n      margin: 0.3rem;\n      margin-left: 2rem;\n    }\n    li > p,\n    li > ul,\n    li > ol {\n      margin-bottom: 0;\n    }\n    ol {\n      list-style-type: decimal;\n    }\n    ul {\n      list-style-type: disc;\n    }\n    blockquote {\n      padding: 0.5rem;\n      background-color: ${isDarkMode ? \"#333\" : \"#eee\"};\n      margin: 0.3rem;\n      margin-top: 0.5rem;\n      margin-bottom: 0.5rem;\n      border-left-width: 4px;\n      border-color: ${isDarkMode\n        ? darkModeColor.mainColor2\n        : whiteModeColor.mainColor2};\n    }\n    blockquote > p {\n      margin: 0.5rem;\n    }\n    blockquote > h1,\n    blockquote > h2,\n    blockquote > h3,\n    blockquote > h4,\n    blockquote > h5 {\n      margin-top: 0.5rem;\n      margin-bottom: 0.5rem;\n    }\n    td,\n    th {\n      padding-left: 0.5rem;\n      padding-right: 0.5rem;\n      padding-top: 0.25rem;\n      padding-bottom: 0.25rem;\n      border-width: 1px;\n      border-color: ${isDarkMode\n        ? darkModeColor.mainColor2\n        : whiteModeColor.mainColor2};\n    }\n    tr:nth-of-type(even) {\n      background-color: ${isDarkMode ? \"#333\" : \"#eee\"};\n    }\n    th {\n      background-color: ${isDarkMode ? \"#333\" : \"#eee\"};\n    }\n    table {\n      margin-bottom: 1.5rem;\n      display: block;\n      max-width: fit-content;\n      margin: 0 auto;\n      overflow-x: auto;\n      white-space: nowrap;\n    }\n\n    p > code,\n    li > code {\n      padding-top: 0.1rem;\n      padding-bottom: 0.1rem;\n      padding-right: 0.25rem;\n      padding-left: 0.25rem;\n      border-radius: 0.25rem;\n      color: ${isDarkMode\n        ? darkModeColor.textColor1\n        : whiteModeColor.textColor1};\n      background-color: ${isDarkMode ? \"#333\" : \"#eee\"};\n      white-space: pre-line;\n    }\n\n    pre.grvsc-container {\n      margin-top: 24px;\n      margin-bottom: 24px;\n    }\n\n    hr {\n      margin-top: 24px;\n      margin-bottom: 24px;\n      height: 2px;\n      border: none;\n      background: linear-gradient(\n        270deg,\n        ${isDarkMode\n          ? darkModeColor.mainColor1 +\n            \",\" +\n            darkModeColor.mainColor2 +\n            \",\" +\n            darkModeColor.mainColor3\n          : whiteModeColor.mainColor1 +\n            \",\" +\n            whiteModeColor.mainColor2 +\n            \",\" +\n            whiteModeColor.mainColor3}\n      );\n    }\n  `\n  return (\n    <div>\n      <div\n        css={MarkdownCSS}\n        className=\"markdown\"\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n    </div>\n  )\n}\n\nexport default Markdown\n","import React, { useContext } from \"react\"\nimport ThemeContext from \"../lib/context/ThemContext\"\nimport { darkModeColor, whiteModeColor } from \"../../them-color\"\nimport tw, { css } from \"twin.macro\"\n\nconst Divider = ({ vertical, color, margin, fat }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  return (\n    <>\n      <div\n        css={\n          vertical\n            ? [tw`h-full flex justify-center`, margin && tw`my-2`]\n            : [tw`flex justify-center`, margin && tw`mx-2`]\n        }\n      >\n        <div\n          css={[\n            tw`rounded-full`,\n            fat\n              ? vertical\n                ? tw`h-full w-1 my-auto`\n                : tw`w-full h-1`\n              : vertical\n              ? tw`h-full w-px my-auto`\n              : tw`w-full h-px`,\n            isDarkMode ? tw`bg-gray-800` : tw`bg-gray-100`,\n            color &&\n              css`\n                background: linear-gradient(\n                  ${vertical ? \"180\" : \"270\"}deg,\n                  ${isDarkMode\n                    ? darkModeColor.mainColor1 +\n                      \",\" +\n                      darkModeColor.mainColor2 +\n                      \",\" +\n                      darkModeColor.mainColor3\n                    : whiteModeColor.mainColor1 +\n                      \",\" +\n                      whiteModeColor.mainColor2 +\n                      \",\" +\n                      whiteModeColor.mainColor3}\n                );\n              `,\n          ]}\n        ></div>\n      </div>\n    </>\n  )\n}\n\nexport default Divider\n","import React from \"react\"\nimport Tag from \"./Tag\"\n\nconst Tags = ({ tags, onClick, tag: selectedTag, scrollToCenter }) => {\n  return tags.map((tag, index) => (\n    <Tag\n      tag={tag}\n      selectedTag={selectedTag}\n      scrollToCenter={scrollToCenter}\n      key={`tag_${index}`}\n      onClick={onClick}\n    />\n  ))\n}\n\nexport default Tags\n"],"sourceRoot":""}